// TODO: Fix circular dependency
import { Options } from './main';
import { getProgramFromConfig } from './tsProgram';
import { assertExists } from './assertions';
import * as tjs from 'typescript-json-schema';
import * as fs from 'fs';
import { parseSourceFile } from './parseTypes';
import { MODULE_NAME } from './config';
import * as path from 'path';
import prettier from 'prettier';

export interface AliasData {
    refName: string;
    alias: string;
    srcPath: string;
}

export function processProject(options: Options) {
    const program = getProgramFromConfig(options.projectPath);

    const sourceFiles = program.getSourceFiles();

    const generator = assertExists(
        tjs.buildGenerator(program, {
            aliasRef: true,
            required: true
        }),
        'Expected typescript generator to be built'
    );

    const checker = program.getTypeChecker();

    const symbols = sourceFiles.reduce(
        (acc, src) => acc.concat(parseSourceFile(src, checker, generator)),
        [] as AliasData[]
    );

    const schema = generator.getSchemaForSymbols(symbols.map(ref => ref.refName));
    fs.writeFileSync(options.schemaPath, JSON.stringify(schema));
    fs.writeFileSync(options.typeDefinitionsPath, template(options.typeDefinitionsPath, symbols));
}

// tslint:disable-next-line
const truePath: (pat: string) => string = require('true-case-path');

function template(outputPath: string, aliasData: AliasData[], aliased = '') {
    const imports: string[] = aliasData.map(data => {
        const from = truePath(path.normalize(path.dirname(path.resolve(outputPath))).toLowerCase());
        const to = truePath(path.normalize(data.srcPath).toLowerCase());
        const relPath = `./${path.relative(from, to)}`.slice(0, -3).replace(path.sep, '/');

        return `import { ${data.refName} } from '${relPath}';`;
    });

    const overrides: string[] = aliasData.map(data => {
        return `function validate(interfaceName: '${data.alias}', obj: any): ${data.refName};`;
    });

    return (
        '// prettier-ignore-start\n' +
        prettier.format(
            `// tslint:disable
/*
 * This file was automatically generated by something else. Probably shouldn't touch it.
 */
import * as _unused from '${MODULE_NAME}';
${imports.join('\n')}

declare namespace Validate {
    ${overrides.join('\n')}
    function validate(interfaceName: string, obj: any): never;
}

declare module '${MODULE_NAME}' {
    // @ts-ignore
    ${
        aliased.length === 0
            ? 'export function validator(schemaPath: string): typeof Validate.validate;'
            : `export function validator(schemaPath: string, schemaName: '${aliased}'): typeof Validate.validate;`
    }

}
`,
            { filepath: outputPath }
        )
    );
}
